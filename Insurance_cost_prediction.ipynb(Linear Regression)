{
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3",
      "language": "python"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.12",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kaggle": {
      "accelerator": "none",
      "dataSources": [],
      "dockerImageVersionId": 30626,
      "isInternetEnabled": true,
      "language": "python",
      "sourceType": "notebook",
      "isGpuEnabled": false
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sushanttwayana/ML-DL-Strategies-Toolkit/blob/main/Insurance_cost_prediction.ipynb(Linear%20Regression)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Insurance cost prediction using linear regression\n",
        "\n",
        "Make a submisson here: https://jovian.ai/learn/deep-learning-with-pytorch-zero-to-gans/assignment/assignment-2-train-your-first-model\n",
        "\n",
        "In this assignment we're going to use information like a person's age, sex, BMI, no. of children and smoking habit to predict the price of yearly medical bills. This kind of model is useful for insurance companies to determine the yearly insurance premium for a person. The dataset for this problem is taken from [Kaggle](https://www.kaggle.com/mirichoi0218/insurance).\n",
        "\n",
        "\n",
        "We will create a model with the following steps:\n",
        "1. Download and explore the dataset\n",
        "2. Prepare the dataset for training\n",
        "3. Create a linear regression model\n",
        "4. Train the model to fit the data\n",
        "5. Make predictions using the trained model\n",
        "\n",
        "\n",
        "This assignment builds upon the concepts from the first 2 lessons. It will help to review these Jupyter notebooks:\n",
        "- PyTorch basics: https://jovian.ai/aakashns/01-pytorch-basics\n",
        "- Linear Regression: https://jovian.ai/aakashns/02-linear-regression\n",
        "- Logistic Regression: https://jovian.ai/aakashns/03-logistic-regression\n",
        "- Linear regression (minimal): https://jovian.ai/aakashns/housing-linear-minimal\n",
        "- Logistic regression (minimal): https://jovian.ai/aakashns/mnist-logistic-minimal\n",
        "\n",
        "As you go through this notebook, you will find a **???** in certain places. Your job is to replace the **???** with appropriate code or values, to ensure that the notebook runs properly end-to-end . In some cases, you'll be required to choose some hyperparameters (learning rate, batch size etc.). Try to experiment with the hypeparameters to get the lowest loss.\n"
      ],
      "metadata": {
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "id": "6beewY9Evppk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install jovian"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T05:42:12.057358Z",
          "iopub.execute_input": "2023-12-24T05:42:12.057699Z",
          "iopub.status.idle": "2023-12-24T05:42:25.094354Z",
          "shell.execute_reply.started": "2023-12-24T05:42:12.057667Z",
          "shell.execute_reply": "2023-12-24T05:42:25.093482Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "EDW3A4TIvppr",
        "outputId": "e3200ca5-cda9-4e0b-9546-55a561ac2b44"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting jovian\n",
            "  Downloading jovian-0.2.47-py2.py3-none-any.whl (68 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m68.6/68.6 kB\u001b[0m \u001b[31m593.1 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from jovian) (2.31.0)\n",
            "Collecting uuid (from jovian)\n",
            "  Downloading uuid-1.30.tar.gz (5.8 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from jovian) (6.0.1)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from jovian) (8.1.7)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->jovian) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->jovian) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->jovian) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->jovian) (2023.11.17)\n",
            "Building wheels for collected packages: uuid\n",
            "  Building wheel for uuid (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for uuid: filename=uuid-1.30-py3-none-any.whl size=6479 sha256=56e9b93ca5631ef1ed9401d37ecbcfc5525afb93df1713fee7b142bf4acfe884\n",
            "  Stored in directory: /root/.cache/pip/wheels/ed/08/9e/f0a977dfe55051a07e21af89200125d65f1efa60cbac61ed88\n",
            "Successfully built uuid\n",
            "Installing collected packages: uuid, jovian\n",
            "Successfully installed jovian-0.2.47 uuid-1.30\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "uuid"
                ]
              }
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import jovian\n",
        "import torchvision\n",
        "import torch.nn as nn\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import torch.nn.functional as F\n",
        "from torchvision.datasets.utils import download_url\n",
        "from torch.utils.data import DataLoader, TensorDataset, random_split"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T05:42:26.830918Z",
          "iopub.execute_input": "2023-12-24T05:42:26.831292Z",
          "iopub.status.idle": "2023-12-24T05:42:27.614718Z",
          "shell.execute_reply.started": "2023-12-24T05:42:26.831264Z",
          "shell.execute_reply": "2023-12-24T05:42:27.613482Z"
        },
        "trusted": true,
        "id": "hI-3jmvtvppt"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Step 1: Download and explore the data\n",
        "\n",
        "Let us begin by downloading the data. We'll use the `download_url` function from PyTorch to get the data as a CSV (comma-separated values) file."
      ],
      "metadata": {
        "id": "me6b6MNvvppu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "DATASET_URL = \"https://gist.github.com/BirajCoder/5f068dfe759c1ea6bdfce9535acdb72d/raw/c84d84e3c80f93be67f6c069cbdc0195ec36acbd/insurance.csv\"\n",
        "DATA_FILENAME = \"insurance.csv\"\n",
        "download_url(DATASET_URL, '.')"
      ],
      "metadata": {
        "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
        "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
        "execution": {
          "iopub.status.busy": "2023-12-24T05:42:49.398573Z",
          "iopub.execute_input": "2023-12-24T05:42:49.398885Z",
          "iopub.status.idle": "2023-12-24T05:42:49.933899Z",
          "shell.execute_reply.started": "2023-12-24T05:42:49.398861Z",
          "shell.execute_reply": "2023-12-24T05:42:49.933026Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Th3NDMUsvppu",
        "outputId": "c0c67933-a40f-4e60-e67b-545c96f225e3"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading https://gist.githubusercontent.com/BirajCoder/5f068dfe759c1ea6bdfce9535acdb72d/raw/c84d84e3c80f93be67f6c069cbdc0195ec36acbd/insurance.csv to ./insurance.csv\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 54288/54288 [00:00<00:00, 50431976.87it/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "To load the dataset into memory, we'll use the `read_csv` function from the `pandas` library. The data will be loaded as a Pandas dataframe. See this short tutorial to learn more: https://data36.com/pandas-tutorial-1-basics-reading-data-files-dataframes-data-selection/"
      ],
      "metadata": {
        "id": "UaO_rhZ7vppv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe_raw = pd.read_csv(DATA_FILENAME)\n",
        "dataframe_raw.head()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T05:44:19.640314Z",
          "iopub.execute_input": "2023-12-24T05:44:19.641087Z",
          "iopub.status.idle": "2023-12-24T05:44:19.672744Z",
          "shell.execute_reply.started": "2023-12-24T05:44:19.641037Z",
          "shell.execute_reply": "2023-12-24T05:44:19.671377Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Q4KnSFCtvppv",
        "outputId": "5c5fd4b0-45af-4e61-f73b-d384e46b220c"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age     sex     bmi  children smoker     region      charges\n",
              "0   19  female  27.900         0    yes  southwest  16884.92400\n",
              "1   18    male  33.770         1     no  southeast   1725.55230\n",
              "2   28    male  33.000         3     no  southeast   4449.46200\n",
              "3   33    male  22.705         0     no  northwest  21984.47061\n",
              "4   32    male  28.880         0     no  northwest   3866.85520"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5aee1257-49af-41a7-8b1d-31c534d468a7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19</td>\n",
              "      <td>female</td>\n",
              "      <td>27.900</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>southwest</td>\n",
              "      <td>16884.92400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18</td>\n",
              "      <td>male</td>\n",
              "      <td>33.770</td>\n",
              "      <td>1</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>1725.55230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>28</td>\n",
              "      <td>male</td>\n",
              "      <td>33.000</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>4449.46200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>male</td>\n",
              "      <td>22.705</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>21984.47061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>32</td>\n",
              "      <td>male</td>\n",
              "      <td>28.880</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>3866.85520</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5aee1257-49af-41a7-8b1d-31c534d468a7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5aee1257-49af-41a7-8b1d-31c534d468a7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5aee1257-49af-41a7-8b1d-31c534d468a7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a57a56a0-90f8-4d9e-adc3-927242086d2b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a57a56a0-90f8-4d9e-adc3-927242086d2b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a57a56a0-90f8-4d9e-adc3-927242086d2b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We're going to do a slight customization of the data, so that you every participant receives a slightly different version of the dataset. Fill in your name below as a string (enter at least 5 characters)"
      ],
      "metadata": {
        "id": "6q4LqP16vppv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "your_name = 'Sushant' # at least 5 characters"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T05:45:08.230349Z",
          "iopub.execute_input": "2023-12-24T05:45:08.230713Z",
          "iopub.status.idle": "2023-12-24T05:45:08.235798Z",
          "shell.execute_reply.started": "2023-12-24T05:45:08.230687Z",
          "shell.execute_reply": "2023-12-24T05:45:08.234520Z"
        },
        "trusted": true,
        "id": "sgbG2GKHvppv"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The `customize_dataset` function will customize the dataset slightly using your name as a source of random numbers."
      ],
      "metadata": {
        "id": "g_mdKw1tvppw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def customize_dataset(dataframe_raw, rand_str):\n",
        "    dataframe = dataframe_raw.copy(deep = True)\n",
        "\n",
        "    # drop some rows\n",
        "    dataframe = dataframe.sample(int(0.95 * len(dataframe)), random_state = int(ord(rand_str[0])))\n",
        "    #scale input\n",
        "    dataframe.bmi = dataframe.bmi * ord(rand_str[1])/100\n",
        "    #scale target\n",
        "    dataframe.charges = dataframe.charges * ord(rand_str[2])/100\n",
        "\n",
        "    #drop column\n",
        "    if ord(rand_str[3]) % 2 ==1:\n",
        "        dataframe = dataframe.drop(['region'], axis=1)\n",
        "\n",
        "    return dataframe\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T05:51:59.879755Z",
          "iopub.execute_input": "2023-12-24T05:51:59.880102Z",
          "iopub.status.idle": "2023-12-24T05:51:59.886079Z",
          "shell.execute_reply.started": "2023-12-24T05:51:59.880077Z",
          "shell.execute_reply": "2023-12-24T05:51:59.885374Z"
        },
        "trusted": true,
        "id": "BQyH5S65vppw"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe = customize_dataset(dataframe_raw, your_name)\n",
        "dataframe.head()\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T06:26:22.061108Z",
          "iopub.execute_input": "2023-12-24T06:26:22.061463Z",
          "iopub.status.idle": "2023-12-24T06:26:22.078397Z",
          "shell.execute_reply.started": "2023-12-24T06:26:22.061436Z",
          "shell.execute_reply": "2023-12-24T06:26:22.076662Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "LpP-iLohvppx",
        "outputId": "ed502df3-8bfe-465e-d8d0-92b35368c7c0"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      age     sex       bmi  children smoker     region       charges\n",
              "665    43    male  44.53020         2    yes  southeast  48944.494960\n",
              "579    25  female  27.45405         0     no  northeast   3687.465052\n",
              "84     37  female  40.71600         2    yes  southwest  45811.996850\n",
              "244    63  female  32.45580         0    yes  northeast  33951.640440\n",
              "1307   32    male  32.90040         4    yes  northwest  24693.350620"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a1bd7087-d3b9-4ab0-a23a-18b99c880f40\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>665</th>\n",
              "      <td>43</td>\n",
              "      <td>male</td>\n",
              "      <td>44.53020</td>\n",
              "      <td>2</td>\n",
              "      <td>yes</td>\n",
              "      <td>southeast</td>\n",
              "      <td>48944.494960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>579</th>\n",
              "      <td>25</td>\n",
              "      <td>female</td>\n",
              "      <td>27.45405</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northeast</td>\n",
              "      <td>3687.465052</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>84</th>\n",
              "      <td>37</td>\n",
              "      <td>female</td>\n",
              "      <td>40.71600</td>\n",
              "      <td>2</td>\n",
              "      <td>yes</td>\n",
              "      <td>southwest</td>\n",
              "      <td>45811.996850</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>244</th>\n",
              "      <td>63</td>\n",
              "      <td>female</td>\n",
              "      <td>32.45580</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>northeast</td>\n",
              "      <td>33951.640440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1307</th>\n",
              "      <td>32</td>\n",
              "      <td>male</td>\n",
              "      <td>32.90040</td>\n",
              "      <td>4</td>\n",
              "      <td>yes</td>\n",
              "      <td>northwest</td>\n",
              "      <td>24693.350620</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a1bd7087-d3b9-4ab0-a23a-18b99c880f40')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a1bd7087-d3b9-4ab0-a23a-18b99c880f40 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a1bd7087-d3b9-4ab0-a23a-18b99c880f40');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bc606922-1dea-417a-92dd-31c58668dc97\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bc606922-1dea-417a-92dd-31c58668dc97')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bc606922-1dea-417a-92dd-31c58668dc97 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(dataframe)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T06:26:26.845886Z",
          "iopub.execute_input": "2023-12-24T06:26:26.846241Z",
          "iopub.status.idle": "2023-12-24T06:26:26.853369Z",
          "shell.execute_reply.started": "2023-12-24T06:26:26.846219Z",
          "shell.execute_reply": "2023-12-24T06:26:26.852307Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ocS0iU1Cvppx",
        "outputId": "e7b017a3-f166-4864-9edd-161ba66bc65a"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1271"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let us answer some basic questions about the dataset.\n",
        "\n",
        "\n",
        "**Q1: How many rows does the dataset have?**"
      ],
      "metadata": {
        "id": "zf_WEN9cvppy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num_rows, num_columns = dataframe_raw.shape\n",
        "print(num_rows)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T05:54:15.118837Z",
          "iopub.execute_input": "2023-12-24T05:54:15.119215Z",
          "iopub.status.idle": "2023-12-24T05:54:15.125379Z",
          "shell.execute_reply.started": "2023-12-24T05:54:15.119189Z",
          "shell.execute_reply": "2023-12-24T05:54:15.123966Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2sKWNIzsvppy",
        "outputId": "30c041d4-0a18-4b15-86d9-88f0264b4b35"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1338\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q2: How many columns doe the dataset have**"
      ],
      "metadata": {
        "id": "dFQH2CXbvppy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num_rows, num_columns = dataframe_raw.shape\n",
        "print(num_columns)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T05:54:10.224411Z",
          "iopub.execute_input": "2023-12-24T05:54:10.224792Z",
          "iopub.status.idle": "2023-12-24T05:54:10.230853Z",
          "shell.execute_reply.started": "2023-12-24T05:54:10.224766Z",
          "shell.execute_reply": "2023-12-24T05:54:10.229829Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VQXgwhNIvppz",
        "outputId": "01769cc4-75b6-4739-9a85-a0176f1d553a"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q3: What are the column titles of the input variables?**"
      ],
      "metadata": {
        "id": "uLRTMBnVvppz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "input_cols = dataframe_raw.columns\n",
        "print(input_cols)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T05:55:52.840165Z",
          "iopub.execute_input": "2023-12-24T05:55:52.840575Z",
          "iopub.status.idle": "2023-12-24T05:55:52.845529Z",
          "shell.execute_reply.started": "2023-12-24T05:55:52.840548Z",
          "shell.execute_reply": "2023-12-24T05:55:52.844629Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-JhaQjwpvppz",
        "outputId": "e8573987-a001-4602-acbe-764da5057385"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'], dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q4: Which of the input columns are non-numeric or categorial variables ?**\n",
        "\n",
        "Hint: `sex` is one of them. List the columns that are not numbers."
      ],
      "metadata": {
        "id": "St948Nprvppz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Identify non-numeric or categorical columns\n",
        "categorical_cols = dataframe_raw.select_dtypes(exclude = 'number').columns\n",
        "print(categorical_cols)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T05:58:08.671585Z",
          "iopub.execute_input": "2023-12-24T05:58:08.671930Z",
          "iopub.status.idle": "2023-12-24T05:58:08.678358Z",
          "shell.execute_reply.started": "2023-12-24T05:58:08.671906Z",
          "shell.execute_reply": "2023-12-24T05:58:08.676959Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bmxBSVQ4vppz",
        "outputId": "2d5ae37b-c5a7-4d7d-f920-3dd0ab384081"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['sex', 'smoker', 'region'], dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q5: What are the column titles of output/target variable(s)?**"
      ],
      "metadata": {
        "id": "nAlD4Uywvpp0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "output_cols = ['charges']\n",
        "\n",
        "column_titles = dataframe_raw.columns\n",
        "print(column_titles)\n",
        "\n",
        "charges_column = dataframe_raw['charges']\n",
        "print(charges_column)\n",
        "\n",
        "charges_dataframe = dataframe_raw[['charges']]\n",
        "print(charges_dataframe)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T06:20:09.378335Z",
          "iopub.execute_input": "2023-12-24T06:20:09.378725Z",
          "iopub.status.idle": "2023-12-24T06:20:09.392239Z",
          "shell.execute_reply.started": "2023-12-24T06:20:09.378694Z",
          "shell.execute_reply": "2023-12-24T06:20:09.389459Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LMfz4cT1vpp0",
        "outputId": "1b29bf60-49ba-420c-f930-ab89252900ff"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'], dtype='object')\n",
            "0       16884.92400\n",
            "1        1725.55230\n",
            "2        4449.46200\n",
            "3       21984.47061\n",
            "4        3866.85520\n",
            "           ...     \n",
            "1333    10600.54830\n",
            "1334     2205.98080\n",
            "1335     1629.83350\n",
            "1336     2007.94500\n",
            "1337    29141.36030\n",
            "Name: charges, Length: 1338, dtype: float64\n",
            "          charges\n",
            "0     16884.92400\n",
            "1      1725.55230\n",
            "2      4449.46200\n",
            "3     21984.47061\n",
            "4      3866.85520\n",
            "...           ...\n",
            "1333  10600.54830\n",
            "1334   2205.98080\n",
            "1335   1629.83350\n",
            "1336   2007.94500\n",
            "1337  29141.36030\n",
            "\n",
            "[1338 rows x 1 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " \"charges,\"column is likely to be your output/target variable for predicting the insurance premium."
      ],
      "metadata": {
        "id": "TRsrVn83vpp0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q: (Optional) What is the minimum, maximum and average value of the `charges` column? Can you show the distribution of values in a graph?**\n",
        "Use this data visualization cheatsheet for referece: https://jovian.ai/aakashns/dataviz-cheatsheet"
      ],
      "metadata": {
        "id": "kbrKGBukvpp0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write your answer here\n",
        "\n",
        "# Calculate minimum, maximum, and average values\n",
        "\n",
        "min_charge = charges_column.min()\n",
        "max_charge = charges_column.max()\n",
        "average_charge = charges_column.mean()\n",
        "\n",
        "# Displaying the results\n",
        "print(\"Minimum Charge:\", min_charge)\n",
        "print(\"Maximum Charge:\", max_charge)\n",
        "print(\"Average Charge:\", average_charge)\n",
        "\n",
        "# Representing in the histogram\n",
        "\n",
        "plt.figure(figsize = (10,6))\n",
        "plt.hist(charges_column, bins = 30, color = 'orange', edgecolor = 'black')\n",
        "plt.title('Distribution of Charges')\n",
        "plt.xlabel('Charges')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T06:09:52.871687Z",
          "iopub.execute_input": "2023-12-24T06:09:52.872253Z",
          "iopub.status.idle": "2023-12-24T06:09:53.134887Z",
          "shell.execute_reply.started": "2023-12-24T06:09:52.872213Z",
          "shell.execute_reply": "2023-12-24T06:09:53.133716Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 616
        },
        "id": "YblSzKpIvpp0",
        "outputId": "011a2cad-7048-4907-e629-69e487a3da8b"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Minimum Charge: 1121.8739\n",
            "Maximum Charge: 63770.42801\n",
            "Average Charge: 13270.422265141257\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Step 2: Prepare the dataset for training\n",
        "\n",
        "We need to convert the data from the Pandas dataframe into a PyTorch tensors for training. To do this, the first step is to convert it numpy arrays. If you've filled out `input_cols`, `categorial_cols` and `output_cols` correctly, this following function will perform the conversion to numpy arrays."
      ],
      "metadata": {
        "id": "lvSczJJLvpp1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def dataframe_to_arrays(dataframe):\n",
        "\n",
        "    # Make a copy of the original dataframe to avoid modifying the original\n",
        "    dataframe1 = dataframe.copy(deep=True)\n",
        "\n",
        "    # Assuming categorical_cols, input_cols, and output_cols are defined elsewhere\n",
        "    # Converting non-numeric categorical columns to numerical codes\n",
        "    for col in categorical_cols:\n",
        "        dataframe1[col] = dataframe1[col].astype('category').cat.codes\n",
        "\n",
        "    # Extract input & outupts as numpy arrays\n",
        "    inputs_array = dataframe1[input_cols].to_numpy()\n",
        "    targets_array = dataframe1[output_cols].to_numpy()\n",
        "\n",
        "    # Return the resulting arrays\n",
        "    return inputs_array, targets_array\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T06:21:45.510086Z",
          "iopub.execute_input": "2023-12-24T06:21:45.510551Z",
          "iopub.status.idle": "2023-12-24T06:21:45.519351Z",
          "shell.execute_reply.started": "2023-12-24T06:21:45.510521Z",
          "shell.execute_reply": "2023-12-24T06:21:45.518103Z"
        },
        "trusted": true,
        "id": "9oJlKqjevpp2"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Read through the [Pandas documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html) to understand how we're converting categorical variables into numbers."
      ],
      "metadata": {
        "id": "qFybVo0Ovpp2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "inputs_array, targets_array = dataframe_to_arrays(dataframe)\n",
        "inputs_array, targets_array"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T06:21:52.018519Z",
          "iopub.execute_input": "2023-12-24T06:21:52.018874Z",
          "iopub.status.idle": "2023-12-24T06:21:52.033642Z",
          "shell.execute_reply.started": "2023-12-24T06:21:52.018848Z",
          "shell.execute_reply": "2023-12-24T06:21:52.032193Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q2esU540vpp2",
        "outputId": "b757c5e8-ac2a-478d-d6fe-8b2cf95f2c38"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([[4.30000000e+01, 1.00000000e+00, 4.45302000e+01, ...,\n",
              "         1.00000000e+00, 2.00000000e+00, 4.89444950e+04],\n",
              "        [2.50000000e+01, 0.00000000e+00, 2.74540500e+01, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 3.68746505e+03],\n",
              "        [3.70000000e+01, 0.00000000e+00, 4.07160000e+01, ...,\n",
              "         1.00000000e+00, 3.00000000e+00, 4.58119968e+04],\n",
              "        ...,\n",
              "        [4.70000000e+01, 1.00000000e+00, 2.97297000e+01, ...,\n",
              "         1.00000000e+00, 2.00000000e+00, 2.52754784e+04],\n",
              "        [3.50000000e+01, 1.00000000e+00, 2.82321000e+01, ...,\n",
              "         0.00000000e+00, 1.00000000e+00, 5.89399806e+03],\n",
              "        [4.30000000e+01, 0.00000000e+00, 2.95659000e+01, ...,\n",
              "         1.00000000e+00, 0.00000000e+00, 2.50370436e+04]]),\n",
              " array([[48944.49496  ],\n",
              "        [ 3687.4650525],\n",
              "        [45811.99685  ],\n",
              "        ...,\n",
              "        [25275.478435 ],\n",
              "        [ 5893.998055 ],\n",
              "        [25037.043645 ]]))"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q6: Convert the numpy arrays `inputs_array` and `targets_array` into PyTorch tensors. Make sure that the data type is `torch.float32`.**"
      ],
      "metadata": {
        "id": "x5Swi7nOvpp2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert NumPy arrays to PyTorch tensors with torch.float32 data type\n",
        "inputs = torch.tensor(inputs_array, dtype=torch.float32)\n",
        "targets = torch.tensor(targets_array, dtype=torch.float32)\n",
        "\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T06:24:42.202709Z",
          "iopub.execute_input": "2023-12-24T06:24:42.203133Z",
          "iopub.status.idle": "2023-12-24T06:24:42.209588Z",
          "shell.execute_reply.started": "2023-12-24T06:24:42.203103Z",
          "shell.execute_reply": "2023-12-24T06:24:42.208346Z"
        },
        "trusted": true,
        "id": "ntE-IQHXvpp2"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "inputs.dtype, targets.dtype\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T06:24:45.368699Z",
          "iopub.execute_input": "2023-12-24T06:24:45.369050Z",
          "iopub.status.idle": "2023-12-24T06:24:45.374365Z",
          "shell.execute_reply.started": "2023-12-24T06:24:45.369025Z",
          "shell.execute_reply": "2023-12-24T06:24:45.373671Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_PoBifz3vpp3",
        "outputId": "bfcbd9e4-e139-4cfc-c192-93b09aec3298"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(torch.float32, torch.float32)"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Next, we need to create PyTorch datasets & data loaders for training & validation. We'll start by creating a `TensorDataset`."
      ],
      "metadata": {
        "id": "NBWWeMQEvpqM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "dataset = TensorDataset(inputs, targets)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T06:25:26.151800Z",
          "iopub.execute_input": "2023-12-24T06:25:26.152124Z",
          "iopub.status.idle": "2023-12-24T06:25:26.158818Z",
          "shell.execute_reply.started": "2023-12-24T06:25:26.152101Z",
          "shell.execute_reply": "2023-12-24T06:25:26.157991Z"
        },
        "trusted": true,
        "id": "dFyvkpoFvpqN"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q7: Pick a number between `0.1` and `0.2` to determine the fraction of data that will be used for creating the validation set. Then use `random_split` to create training & validation datasets.**"
      ],
      "metadata": {
        "id": "z1i5AS83vpqN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "val_percent = random.uniform(0.1, 0.2) # between 0.1 and 0.2\n",
        "num_rows = len(dataset)\n",
        "val_size = int(num_rows * val_percent)\n",
        "train_size = num_rows - val_size\n",
        "print(num_rows, val_size, train_size)\n",
        "\n",
        "\n",
        "# Use the random_split function to split dataset into 2 parts of the desired length\n",
        "train_ds, val_ds = random_split(dataset, [train_size, val_size])"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T06:32:17.175135Z",
          "iopub.execute_input": "2023-12-24T06:32:17.176353Z",
          "iopub.status.idle": "2023-12-24T06:32:17.194029Z",
          "shell.execute_reply.started": "2023-12-24T06:32:17.176314Z",
          "shell.execute_reply": "2023-12-24T06:32:17.193095Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QG9hZDpevpqN",
        "outputId": "d2d50ca5-83ec-434a-cab1-faaf4890b9bb"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1271 187 1084\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Finally, we can create data loaders for training & validation.\n",
        "\n",
        "**Q8: Pick a batch size for the data loader.**"
      ],
      "metadata": {
        "id": "TguDCff2vpqN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "batch_size = 32"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T06:32:35.141835Z",
          "iopub.execute_input": "2023-12-24T06:32:35.142180Z",
          "iopub.status.idle": "2023-12-24T06:32:35.147530Z",
          "shell.execute_reply.started": "2023-12-24T06:32:35.142155Z",
          "shell.execute_reply": "2023-12-24T06:32:35.146074Z"
        },
        "trusted": true,
        "id": "_lJ4tdKsvpqO"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_loader = DataLoader(train_ds, batch_size, shuffle=True)\n",
        "val_loader = DataLoader(val_ds, batch_size)\n",
        "print(train_loader)\n",
        "val_loader"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T06:33:20.584387Z",
          "iopub.execute_input": "2023-12-24T06:33:20.584761Z",
          "iopub.status.idle": "2023-12-24T06:33:20.591696Z",
          "shell.execute_reply.started": "2023-12-24T06:33:20.584735Z",
          "shell.execute_reply": "2023-12-24T06:33:20.591028Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1j1CDxuZvpqO",
        "outputId": "7c7db3be-728f-43c1-d721-c28ee81c70d5"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<torch.utils.data.dataloader.DataLoader object at 0x7db7bc79d270>\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<torch.utils.data.dataloader.DataLoader at 0x7db7bc79cdf0>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's look at a batch of data to verify everything is working fine so far."
      ],
      "metadata": {
        "id": "ezBONWaPvpqO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for xb, yb in train_loader:\n",
        "    print(\"inputs:\", xb)\n",
        "    print(\"targets:\", yb)\n",
        "    break"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T06:33:37.814801Z",
          "iopub.execute_input": "2023-12-24T06:33:37.815895Z",
          "iopub.status.idle": "2023-12-24T06:33:37.893934Z",
          "shell.execute_reply.started": "2023-12-24T06:33:37.815858Z",
          "shell.execute_reply": "2023-12-24T06:33:37.892929Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ulZv1zJ7vpqO",
        "outputId": "9b6cab32-1d97-422f-c934-e245826aaedf"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "inputs: tensor([[2.7000e+01, 1.0000e+00, 3.8124e+01, 3.0000e+00, 0.0000e+00, 0.0000e+00,\n",
            "         5.5740e+03],\n",
            "        [2.3000e+01, 1.0000e+00, 4.3407e+01, 3.0000e+00, 0.0000e+00, 3.0000e+00,\n",
            "         4.1372e+03],\n",
            "        [5.6000e+01, 1.0000e+00, 2.3341e+01, 0.0000e+00, 1.0000e+00, 0.0000e+00,\n",
            "         2.5775e+04],\n",
            "        [4.1000e+01, 1.0000e+00, 3.6013e+01, 3.0000e+00, 1.0000e+00, 0.0000e+00,\n",
            "         4.5537e+04],\n",
            "        [5.1000e+01, 1.0000e+00, 2.8566e+01, 4.0000e+00, 0.0000e+00, 1.0000e+00,\n",
            "         1.3248e+04],\n",
            "        [6.1000e+01, 0.0000e+00, 3.6457e+01, 0.0000e+00, 0.0000e+00, 1.0000e+00,\n",
            "         1.5443e+04],\n",
            "        [4.9000e+01, 0.0000e+00, 4.8520e+01, 4.0000e+00, 0.0000e+00, 2.0000e+00,\n",
            "         1.2624e+04],\n",
            "        [2.7000e+01, 1.0000e+00, 4.9292e+01, 0.0000e+00, 1.0000e+00, 2.0000e+00,\n",
            "         4.5554e+04],\n",
            "        [3.0000e+01, 1.0000e+00, 2.8548e+01, 3.0000e+00, 1.0000e+00, 3.0000e+00,\n",
            "         2.0998e+04],\n",
            "        [1.9000e+01, 1.0000e+00, 4.1418e+01, 0.0000e+00, 0.0000e+00, 3.0000e+00,\n",
            "         1.4527e+03],\n",
            "        [1.9000e+01, 1.0000e+00, 3.9897e+01, 0.0000e+00, 0.0000e+00, 3.0000e+00,\n",
            "         1.4507e+03],\n",
            "        [1.9000e+01, 1.0000e+00, 3.5790e+01, 0.0000e+00, 0.0000e+00, 1.0000e+00,\n",
            "         1.8855e+03],\n",
            "        [2.7000e+01, 0.0000e+00, 4.2214e+01, 0.0000e+00, 1.0000e+00, 2.0000e+00,\n",
            "         4.2704e+04],\n",
            "        [4.7000e+01, 1.0000e+00, 2.2452e+01, 1.0000e+00, 0.0000e+00, 0.0000e+00,\n",
            "         9.9217e+03],\n",
            "        [4.7000e+01, 0.0000e+00, 5.3024e+01, 1.0000e+00, 0.0000e+00, 2.0000e+00,\n",
            "         9.8553e+03],\n",
            "        [5.6000e+01, 0.0000e+00, 3.3456e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00,\n",
            "         1.3407e+04],\n",
            "        [3.6000e+01, 0.0000e+00, 3.2456e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00,\n",
            "         6.2894e+03],\n",
            "        [2.9000e+01, 0.0000e+00, 3.0455e+01, 0.0000e+00, 0.0000e+00, 1.0000e+00,\n",
            "         4.2969e+03],\n",
            "        [5.0000e+01, 1.0000e+00, 4.2354e+01, 0.0000e+00, 0.0000e+00, 3.0000e+00,\n",
            "         9.7265e+03],\n",
            "        [2.1000e+01, 1.0000e+00, 2.7156e+01, 0.0000e+00, 0.0000e+00, 2.0000e+00,\n",
            "         1.7426e+03],\n",
            "        [2.6000e+01, 1.0000e+00, 3.1660e+01, 0.0000e+00, 1.0000e+00, 2.0000e+00,\n",
            "         1.9600e+04],\n",
            "        [2.4000e+01, 0.0000e+00, 3.5346e+01, 3.0000e+00, 0.0000e+00, 1.0000e+00,\n",
            "         5.3108e+03],\n",
            "        [3.4000e+01, 1.0000e+00, 4.0570e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00,\n",
            "         5.1967e+03],\n",
            "        [3.3000e+01, 1.0000e+00, 4.1237e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00,\n",
            "         1.4266e+04],\n",
            "        [4.7000e+01, 1.0000e+00, 2.9730e+01, 1.0000e+00, 1.0000e+00, 2.0000e+00,\n",
            "         2.5275e+04],\n",
            "        [2.5000e+01, 1.0000e+00, 3.1356e+01, 3.0000e+00, 0.0000e+00, 3.0000e+00,\n",
            "         4.4920e+03],\n",
            "        [5.8000e+01, 0.0000e+00, 2.9484e+01, 0.0000e+00, 0.0000e+00, 3.0000e+00,\n",
            "         1.3613e+04],\n",
            "        [6.3000e+01, 1.0000e+00, 4.1055e+01, 0.0000e+00, 1.0000e+00, 2.0000e+00,\n",
            "         5.4114e+04],\n",
            "        [1.8000e+01, 0.0000e+00, 2.5342e+01, 0.0000e+00, 1.0000e+00, 0.0000e+00,\n",
            "         1.6426e+04],\n",
            "        [4.8000e+01, 1.0000e+00, 4.7461e+01, 2.0000e+00, 1.0000e+00, 1.0000e+00,\n",
            "         5.2557e+04],\n",
            "        [1.9000e+01, 0.0000e+00, 4.2793e+01, 0.0000e+00, 0.0000e+00, 1.0000e+00,\n",
            "         2.4574e+03],\n",
            "        [1.8000e+01, 0.0000e+00, 4.5817e+01, 0.0000e+00, 0.0000e+00, 2.0000e+00,\n",
            "         1.8780e+03]])\n",
            "targets: tensor([[ 5573.9580],\n",
            "        [ 4137.2354],\n",
            "        [25774.5449],\n",
            "        [45537.0195],\n",
            "        [13248.1152],\n",
            "        [15443.3906],\n",
            "        [12623.7871],\n",
            "        [45553.5195],\n",
            "        [20998.0977],\n",
            "        [ 1452.7363],\n",
            "        [ 1450.6583],\n",
            "        [ 1885.4976],\n",
            "        [42703.9844],\n",
            "        [ 9921.6719],\n",
            "        [ 9855.3408],\n",
            "        [13406.8320],\n",
            "        [ 6289.3574],\n",
            "        [ 4296.9346],\n",
            "        [ 9726.4902],\n",
            "        [ 1742.6466],\n",
            "        [19599.8418],\n",
            "        [ 5310.7920],\n",
            "        [ 5196.6504],\n",
            "        [14265.6113],\n",
            "        [25275.4785],\n",
            "        [ 4492.0459],\n",
            "        [13612.7344],\n",
            "        [54113.8633],\n",
            "        [16425.9785],\n",
            "        [52557.3242],\n",
            "        [ 2457.4146],\n",
            "        [ 1878.0011]])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Step 3: Create a Linear Regression Model\n",
        "\n",
        "Our model itself is a fairly straightforward linear regression (we'll build more complex models in the next assignment).\n"
      ],
      "metadata": {
        "id": "CqPlJ9R2vpqP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "input_size = len(input_cols)\n",
        "output_size = len(output_cols)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T06:51:31.605938Z",
          "iopub.execute_input": "2023-12-24T06:51:31.606308Z",
          "iopub.status.idle": "2023-12-24T06:51:31.611551Z",
          "shell.execute_reply.started": "2023-12-24T06:51:31.606280Z",
          "shell.execute_reply": "2023-12-24T06:51:31.610138Z"
        },
        "trusted": true,
        "id": "9ShRiWrMvpqP"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q9: Complete the class definition below by filling out the constructor (`__init__`), `forward`, `training_step` and `validation_step` methods.**\n",
        "\n",
        "Hint: Think carefully about picking a good loss fuction (it's not cross entropy). Maybe try 2-3 of them and see which one works best. See https://pytorch.org/docs/stable/nn.functional.html#loss-functions"
      ],
      "metadata": {
        "id": "NGpTdWJLvpqQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "F.cross_entropy loss function, which requires both predictions (out) and labels. Since we are working with regression (mean squared error loss), you should use F.mse_loss instead."
      ],
      "metadata": {
        "id": "5OXThsO8vpqQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class InsuranceModel(nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.linear = nn.Linear(input_size, output_size)                  # fill this (hint: use input_size & output_size defined above)\n",
        "\n",
        "    def forward(self, xb):\n",
        "        out = self.linear(xb)                         # fill this\n",
        "        return out\n",
        "\n",
        "    def training_step(self, batch):\n",
        "        inputs, targets = batch\n",
        "        # Generate predictions\n",
        "        out = self(inputs)\n",
        "        # Calcuate loss\n",
        "        loss = F.smooth_l1_loss(out, targets)                       # fill this\n",
        "        return loss\n",
        "\n",
        "    def validation_step(self, batch):\n",
        "        inputs, targets = batch\n",
        "        # Generate predictions\n",
        "        out = self(inputs)\n",
        "        # Calculate loss\n",
        "        loss = F.smooth_l1_loss(out, targets)                       # fill this\n",
        "        return {'val_loss': loss.detach()}\n",
        "\n",
        "    def validation_epoch_end(self, outputs):\n",
        "        batch_losses = [x['val_loss'] for x in outputs]\n",
        "        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n",
        "        return {'val_loss': epoch_loss.item()}\n",
        "\n",
        "    def epoch_end(self, epoch, result, num_epochs):\n",
        "        # Print result every 20th epoch\n",
        "        if (epoch+1) % 20 == 0 or epoch == num_epochs-1:\n",
        "            print(\"Epoch [{}], val_loss: {:.4f}\".format(epoch+1, result['val_loss']))"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T07:06:44.519906Z",
          "iopub.execute_input": "2023-12-24T07:06:44.520287Z",
          "iopub.status.idle": "2023-12-24T07:06:44.529176Z",
          "shell.execute_reply.started": "2023-12-24T07:06:44.520262Z",
          "shell.execute_reply": "2023-12-24T07:06:44.527799Z"
        },
        "trusted": true,
        "id": "G2uzrTCsvpqR"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let us create a model using the `InsuranceModel` class. You may need to come back later and re-run the next cell to reinitialize the model, in case the loss becomes `nan` or `infinity`."
      ],
      "metadata": {
        "id": "AjvGcaxSvpqR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = InsuranceModel()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T07:06:52.626588Z",
          "iopub.execute_input": "2023-12-24T07:06:52.627403Z",
          "iopub.status.idle": "2023-12-24T07:06:52.630825Z",
          "shell.execute_reply.started": "2023-12-24T07:06:52.627378Z",
          "shell.execute_reply": "2023-12-24T07:06:52.630194Z"
        },
        "trusted": true,
        "id": "AlJ4OJx2vpqR"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's check out the weights and biases of the model using `model.parameters`."
      ],
      "metadata": {
        "id": "HIxxALCqvpqS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "list(model.parameters())"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T07:06:57.992938Z",
          "iopub.execute_input": "2023-12-24T07:06:57.993352Z",
          "iopub.status.idle": "2023-12-24T07:06:58.002823Z",
          "shell.execute_reply.started": "2023-12-24T07:06:57.993322Z",
          "shell.execute_reply": "2023-12-24T07:06:58.001429Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JJCEIWMPvpqS",
        "outputId": "afd19078-23d9-4bcd-ff3b-6bece9a62f9f"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Parameter containing:\n",
              " tensor([[ 0.1759,  0.1442,  0.3292, -0.0356, -0.0033,  0.2291, -0.0200]],\n",
              "        requires_grad=True),\n",
              " Parameter containing:\n",
              " tensor([-0.2688], requires_grad=True)]"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Step 4: Train the model to fit the data\n",
        "\n",
        "To train our model, we'll use the same `fit` function explained in the lecture. That's the benefit of defining a generic training loop - you can use it for any problem."
      ],
      "metadata": {
        "id": "Lx0YcSY4vpqT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def evaluate(model, val_loader):\n",
        "    outputs = [model.validation_step(batch) for batch in val_loader]\n",
        "    return model.validation_epoch_end(outputs)\n",
        "\n",
        "def fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n",
        "    history = []\n",
        "    optimizer = opt_func(model.parameters(), lr)\n",
        "    for epoch in range(epochs):\n",
        "        # Training Phase\n",
        "        for batch in train_loader:\n",
        "            loss = model.training_step(batch)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "            optimizer.zero_grad()\n",
        "        # Validation phase\n",
        "        result = evaluate(model, val_loader)\n",
        "        model.epoch_end(epoch, result, epochs)\n",
        "        history.append(result)\n",
        "    return history"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T07:07:01.804382Z",
          "iopub.execute_input": "2023-12-24T07:07:01.804744Z",
          "iopub.status.idle": "2023-12-24T07:07:01.812166Z",
          "shell.execute_reply.started": "2023-12-24T07:07:01.804719Z",
          "shell.execute_reply": "2023-12-24T07:07:01.810759Z"
        },
        "trusted": true,
        "id": "Q0zAGercvpqT"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q10: Use the `evaluate` function to calculate the loss on the validation set before training.**"
      ],
      "metadata": {
        "id": "xvtiqV20vpqU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "result = evaluate(model, val_loader) # Use the the evaluate function\n",
        "print(result)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T07:07:05.690548Z",
          "iopub.execute_input": "2023-12-24T07:07:05.690925Z",
          "iopub.status.idle": "2023-12-24T07:07:05.703962Z",
          "shell.execute_reply.started": "2023-12-24T07:07:05.690898Z",
          "shell.execute_reply": "2023-12-24T07:07:05.703277Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uGoeasqovpqU",
        "outputId": "f6558e4d-4592-4a06-b0e5-62b04f461120"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'val_loss': 14224.4189453125}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "We are now ready to train the model. You may need to run the training loop many times, for different number of epochs and with different learning rates, to get a good result. Also, if your loss becomes too large (or `nan`), you may have to re-initialize the model by running the cell `model = InsuranceModel()`. Experiment with this for a while, and try to get to as low a loss as possible."
      ],
      "metadata": {
        "id": "0-0CqD16vpqU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q11: Train the model 4-5 times with different learning rates & for different number of epochs.**\n",
        "\n",
        "Hint: Vary learning rates by orders of 10 (e.g. `1e-2`, `1e-3`, `1e-4`, `1e-5`, `1e-6`) to figure out what works."
      ],
      "metadata": {
        "id": "y_Ts3mt-vpqV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 10\n",
        "lr = 1e-6\n",
        "history1 = fit(epochs, lr, model, train_loader, val_loader)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T07:13:25.044506Z",
          "iopub.execute_input": "2023-12-24T07:13:25.044884Z",
          "iopub.status.idle": "2023-12-24T07:13:25.225371Z",
          "shell.execute_reply.started": "2023-12-24T07:13:25.044857Z",
          "shell.execute_reply": "2023-12-24T07:13:25.224518Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YA20Z2b_vpqV",
        "outputId": "f8c1ed09-7ea1-4210-aa07-78c97b1dc8f4"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [10], val_loss: 72.3244\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(history1)\n",
        "val_loss_values = [entry['val_loss'] for entry in history1]\n",
        "plt.plot(val_loss_values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "TMMr6TN2xAUz",
        "outputId": "c6701395-8a38-44fd-9dde-07b27939c253"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[{'val_loss': 6802.76220703125}, {'val_loss': 155.2019500732422}, {'val_loss': 25.03752326965332}, {'val_loss': 76.98344421386719}, {'val_loss': 123.68489837646484}, {'val_loss': 31.89319610595703}, {'val_loss': 80.81041717529297}, {'val_loss': 157.1705780029297}, {'val_loss': 106.62952423095703}, {'val_loss': 72.32439422607422}]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7db7bbbc5ea0>]"
            ]
          },
          "metadata": {},
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 10\n",
        "lr = 1e-6\n",
        "history2 = fit(epochs, lr, model, train_loader, val_loader)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T07:13:31.247831Z",
          "iopub.execute_input": "2023-12-24T07:13:31.248249Z",
          "iopub.status.idle": "2023-12-24T07:13:31.433401Z",
          "shell.execute_reply.started": "2023-12-24T07:13:31.248206Z",
          "shell.execute_reply": "2023-12-24T07:13:31.431892Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WeLsZEXWvpqW",
        "outputId": "3ee71624-0586-49ec-e094-b96fc8f85467"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [10], val_loss: 45.7986\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 10\n",
        "lr = 1e-6\n",
        "history3 = fit(epochs, lr, model, train_loader, val_loader)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T07:13:43.999883Z",
          "iopub.execute_input": "2023-12-24T07:13:44.000292Z",
          "iopub.status.idle": "2023-12-24T07:13:44.186549Z",
          "shell.execute_reply.started": "2023-12-24T07:13:44.000263Z",
          "shell.execute_reply": "2023-12-24T07:13:44.185135Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6tV4W7DqvpqW",
        "outputId": "30ee79e2-95c8-475c-d5d9-71f8d977f118"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [10], val_loss: 108.7351\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 10\n",
        "lr = 1e-6\n",
        "history4 = fit(epochs, lr, model, train_loader, val_loader)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T07:13:53.847119Z",
          "iopub.execute_input": "2023-12-24T07:13:53.847553Z",
          "iopub.status.idle": "2023-12-24T07:13:54.033011Z",
          "shell.execute_reply.started": "2023-12-24T07:13:53.847519Z",
          "shell.execute_reply": "2023-12-24T07:13:54.032014Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QhDmHMlUvpqX",
        "outputId": "7980054b-af55-4869-e232-4818eb333414"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [10], val_loss: 15.7063\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 10\n",
        "lr = 1e-6\n",
        "history5 = fit(epochs, lr, model, train_loader, val_loader)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T07:14:04.813771Z",
          "iopub.execute_input": "2023-12-24T07:14:04.814138Z",
          "iopub.status.idle": "2023-12-24T07:14:05.000433Z",
          "shell.execute_reply.started": "2023-12-24T07:14:04.814110Z",
          "shell.execute_reply": "2023-12-24T07:14:04.999251Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iFpI3s-svpqX",
        "outputId": "c494c083-b709-4e44-a84d-6f057e7bdf8d"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [10], val_loss: 193.1369\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 10\n",
        "lr = 1e-6\n",
        "history6 = fit(epochs, lr, model, train_loader, val_loader)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vBpxYnvhwtKo",
        "outputId": "ee2cd6d6-bfb2-4a12-9a71-6ebc749dbc45"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [10], val_loss: 16.9194\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(history6)\n",
        "val_loss_values = [entry['val_loss'] for entry in history6]\n",
        "plt.plot(val_loss_values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "9wfBqMo-xDVy",
        "outputId": "ff9a9778-a2b1-4126-b79d-e2071183786f"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[{'val_loss': 57.14167404174805}, {'val_loss': 140.63031005859375}, {'val_loss': 22.300004959106445}, {'val_loss': 21.7662410736084}, {'val_loss': 245.56475830078125}, {'val_loss': 10.125086784362793}, {'val_loss': 220.68211364746094}, {'val_loss': 216.03346252441406}, {'val_loss': 184.4463348388672}, {'val_loss': 16.91936683654785}]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7db7bbc37af0>]"
            ]
          },
          "metadata": {},
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q12: What is the final validation loss of your model?**"
      ],
      "metadata": {
        "id": "Jn4y6m7SvpqX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "val_loss = history6[-1]\n",
        "print(f\"Final Validation Loss: {val_loss}\")"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T07:34:29.688109Z",
          "iopub.execute_input": "2023-12-24T07:34:29.689072Z",
          "iopub.status.idle": "2023-12-24T07:34:29.717203Z",
          "shell.execute_reply.started": "2023-12-24T07:34:29.689034Z",
          "shell.execute_reply": "2023-12-24T07:34:29.715880Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cOEHGqmqvpqX",
        "outputId": "f4ab8bd9-083b-43b2-9b89-26f9d99453e6"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Final Validation Loss: {'val_loss': 16.91936683654785}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's log the final validation loss to Jovian and commit the notebook"
      ],
      "metadata": {
        "id": "FNstcULAvpqY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "jovian.log_metrics(val_loss=val_loss)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B_v4fuT8vpqY",
        "outputId": "459c09b9-bb05-4a8f-df0c-75c0adf06f4b"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[jovian] Please enter your API key ( from https://jovian.com/ ):\u001b[0m\n",
            "API KEY: ··········\n",
            "[jovian] Metrics logged.\u001b[0m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "jovian.commit(project='Insurance_Cost_Prediction', environment=None)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BjulCu7vvpqY",
        "outputId": "51cb1a66-15e7-4817-e078-fa5553a66134"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[jovian] Detected Colab notebook...\u001b[0m\n",
            "[jovian] jovian.commit() is no longer required on Google Colab. If you ran this notebook from Jovian, \n",
            "then just save this file in Colab using Ctrl+S/Cmd+S and it will be updated on Jovian. \n",
            "Also, you can also delete this cell, it's no longer necessary.\u001b[0m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now scroll back up, re-initialize the model, and try different set of values for batch size, number of epochs, learning rate etc. Commit each experiment and use the \"Compare\" and \"View Diff\" options on Jovian to compare the different results."
      ],
      "metadata": {
        "id": "gdLzaWxXvpqZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Step 5: Make predictions using the trained model\n",
        "\n",
        "**Q13: Complete the following function definition to make predictions on a single input**"
      ],
      "metadata": {
        "id": "fy4xVCtEvpqZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def predict_single(input, target, model):\n",
        "    inputs = input.unsqueeze(0)\n",
        "    predictions = model(inputs)                # fill this\n",
        "    prediction = predictions[0].detach()\n",
        "    print(\"Input:\", input)\n",
        "    print(\"Target:\", target)\n",
        "    print(\"Prediction:\", prediction)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T07:42:19.922453Z",
          "iopub.execute_input": "2023-12-24T07:42:19.922822Z",
          "iopub.status.idle": "2023-12-24T07:42:19.928188Z",
          "shell.execute_reply.started": "2023-12-24T07:42:19.922783Z",
          "shell.execute_reply": "2023-12-24T07:42:19.927189Z"
        },
        "trusted": true,
        "id": "L1SeSrfovpqZ"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "input, target = val_ds[0]\n",
        "predict_single(input, target, model)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T07:42:26.001094Z",
          "iopub.execute_input": "2023-12-24T07:42:26.001838Z",
          "iopub.status.idle": "2023-12-24T07:42:26.008641Z",
          "shell.execute_reply.started": "2023-12-24T07:42:26.001807Z",
          "shell.execute_reply": "2023-12-24T07:42:26.007438Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JuACMA2Wvpqa",
        "outputId": "221b1500-b645-4c84-bd48-84651bca9201"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input: tensor([3.8000e+01, 1.0000e+00, 2.4710e+01, 3.0000e+00, 0.0000e+00, 2.0000e+00,\n",
            "        7.6504e+03])\n",
            "Target: tensor([7650.4082])\n",
            "Prediction: tensor([7664.8813])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "input, target = val_ds[10]\n",
        "predict_single(input, target, model)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T07:42:36.200971Z",
          "iopub.execute_input": "2023-12-24T07:42:36.201379Z",
          "iopub.status.idle": "2023-12-24T07:42:36.209787Z",
          "shell.execute_reply.started": "2023-12-24T07:42:36.201353Z",
          "shell.execute_reply": "2023-12-24T07:42:36.208473Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bl9Jeb_Fvpqa",
        "outputId": "d79fb220-04ea-4020-ec1e-64920f27f92a"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input: tensor([5.3000e+01, 1.0000e+00, 2.4453e+01, 0.0000e+00, 1.0000e+00, 2.0000e+00,\n",
            "        2.4375e+04])\n",
            "Target: tensor([24375.1914])\n",
            "Prediction: tensor([24391.3574])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "input, target = val_ds[23]\n",
        "predict_single(input, target, model)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-12-24T07:42:50.296528Z",
          "iopub.execute_input": "2023-12-24T07:42:50.296879Z",
          "iopub.status.idle": "2023-12-24T07:42:50.305107Z",
          "shell.execute_reply.started": "2023-12-24T07:42:50.296853Z",
          "shell.execute_reply": "2023-12-24T07:42:50.303024Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3RnVTNZWvpqa",
        "outputId": "7e32108c-8b48-4cd8-f22e-6cf81aef8b5d"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input: tensor([5.3000e+01, 1.0000e+00, 3.9903e+01, 0.0000e+00, 1.0000e+00, 0.0000e+00,\n",
            "        4.9743e+04])\n",
            "Target: tensor([49742.5820])\n",
            "Prediction: tensor([49761.8906])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Are you happy with your model's predictions? Try to improve them further."
      ],
      "metadata": {
        "id": "emmu1_J8vpqb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## (Optional) Step 6: Try another dataset & blog about it\n",
        "\n",
        "While this last step is optional for the submission of your assignment, we highly recommend that you do it. Try to replicate this notebook for a different linear regression or logistic regression problem. This will help solidify your understanding, and give you a chance to differentiate the generic patterns in machine learning from problem-specific details.You can use one of these starer notebooks (just change the dataset):\n",
        "\n",
        "- Linear regression (minimal): https://jovian.ai/aakashns/housing-linear-minimal\n",
        "- Logistic regression (minimal): https://jovian.ai/aakashns/mnist-logistic-minimal\n",
        "\n",
        "Here are some sources to find good datasets:\n",
        "\n",
        "- https://lionbridge.ai/datasets/10-open-datasets-for-linear-regression/\n",
        "- https://www.kaggle.com/rtatman/datasets-for-regression-analysis\n",
        "- https://archive.ics.uci.edu/ml/datasets.php?format=&task=reg&att=&area=&numAtt=&numIns=&type=&sort=nameUp&view=table\n",
        "- https://people.sc.fsu.edu/~jburkardt/datasets/regression/regression.html\n",
        "- https://archive.ics.uci.edu/ml/datasets/wine+quality\n",
        "- https://pytorch.org/docs/stable/torchvision/datasets.html\n",
        "\n",
        "We also recommend that you write a blog about your approach to the problem. Here is a suggested structure for your post (feel free to experiment with it):\n",
        "\n",
        "- Interesting title & subtitle\n",
        "- Overview of what the blog covers (which dataset, linear regression or logistic regression, intro to PyTorch)\n",
        "- Downloading & exploring the data\n",
        "- Preparing the data for training\n",
        "- Creating a model using PyTorch\n",
        "- Training the model to fit the data\n",
        "- Your thoughts on how to experiment with different hyperparmeters to reduce loss\n",
        "- Making predictions using the model\n",
        "\n",
        "As with the previous assignment, you can [embed Juptyer notebook cells & outputs from Jovian](https://medium.com/jovianml/share-and-embed-jupyter-notebooks-online-with-jovian-ml-df709a03064e) into your blog.\n",
        "\n",
        "Don't forget to share your work on the forum: https://jovian.ai/forum/t/linear-regression-and-logistic-regression-notebooks-and-blog-posts/14039"
      ],
      "metadata": {
        "id": "p27MOfTAvpqb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "jovian.commit(project='Insurance_Cost_Prediction', environment=None)\n",
        "# jovian.commit(project='Insurance_Cost_Prediction', environment=None) # try again, kaggle fails sometimes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GdSUzGdcvpqc",
        "outputId": "2dc0cdbd-624c-4399-fdae-54631b973570"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[jovian] Detected Colab notebook...\u001b[0m\n",
            "[jovian] jovian.commit() is no longer required on Google Colab. If you ran this notebook from Jovian, \n",
            "then just save this file in Colab using Ctrl+S/Cmd+S and it will be updated on Jovian. \n",
            "Also, you can also delete this cell, it's no longer necessary.\u001b[0m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "okysTThbvpqc"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}